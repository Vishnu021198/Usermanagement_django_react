{"ast":null,"code":"// import jwt_decode from \"jwt-decode\";\n// import axios from 'axios'\n\n// const baseURL='http://127.0.0.1:8000'\n// const updateAdminToken = async ()=>{\n//     const refreshToken = localStorage.getItem(\"refresh\");\n\n//     try {\n//         const res = await axios.post(baseURL+'/api/accounts/token/refresh/', \n//         {\n//             'refresh':refreshToken\n//         })\n//         if(res.status === 200){\n//           localStorage.setItem('access', res.data.access)\n//           localStorage.setItem('refresh', res.data.refresh)\n//           return true\n//         }\n//         else\n//         {\n//             return false\n//         }  \n\n//       }\n//       catch (error) {\n//          return false\n//       }\n// }\n\n// const fetchisAdmin = async () => {\n//   const token = localStorage.getItem('access');\n//   try {\n//       const res = await axios.get(baseURL+'/api/accounts/user/details/',{headers: {\n//         'authorization': `Bearer ${token}`,\n//         'Accept' : 'application/json',\n//         'Content-Type': 'application/json'\n//     }})\n//       .then(res => {\n//           console.log(res);\n//           return res.data.is_superuser;\n//         })\n//   }\n//   catch (error) {\n//     return false\n\n//   }\n\n// };\n// const isAuthAdmin = async () => {\n\n//     const accessToken = localStorage.getItem(\"access\");\n\n//     if(!accessToken)\n//     {\n//         return {'name':null,isAuthenticated:false,isAdmin:false}\n//     }\n//     const currentTime = Date.now() / 1000;\n//     let decoded = jwt_decode(accessToken);\n//     if (decoded.exp > currentTime) \n//     {\n//         let checkAdmin = fetchisAdmin()\n//         return {'name':decoded.first_name,isAuthenticated:true,isAdmin:checkAdmin}\n//     } \n//     else \n//     {\n//         const updateSuccess = await updateAdminToken();\n//         if (updateSuccess)\n//         {\n//             let decoded = jwt_decode(accessToken);\n//             let checkAdmin = fetchisAdmin()\n//             return {'name':decoded.first_name,isAuthenticated:true,isAdmin:checkAdmin}\n//         }\n//         else\n//         {\n//             return {'name':null,isAuthenticated:false,isAdmin:false}\n//         }\n\n//     }\n\n// }\n// export default isAuthAdmin ;\n\nimport jwt_decode from \"jwt-decode\";\nimport axios from 'axios';\nconst baseURL = 'http://127.0.0.1:8000';\nconst updateAdminToken = async () => {\n  const refreshToken = localStorage.getItem(\"refresh\");\n  try {\n    const res = await axios.post(baseURL + '/api/accounts/token/refresh/', {\n      'refresh': refreshToken\n    });\n    if (res.status === 200) {\n      localStorage.setItem('access', res.data.access);\n      localStorage.setItem('refresh', res.data.refresh);\n      return true;\n    } else {\n      return false;\n    }\n  } catch (error) {\n    return false;\n  }\n};\nconst fetchisAdmin = async () => {\n  const token = localStorage.getItem('access');\n  try {\n    const res = await axios.get(baseURL + '/api/accounts/user/details/', {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    });\n    return res.data.is_superuser; // Return directly from the function\n  } catch (error) {\n    return false;\n  }\n};\nconst isAuthAdmin = async () => {\n  const accessToken = localStorage.getItem(\"access\");\n  if (!accessToken) {\n    return {\n      'name': null,\n      isAuthenticated: false,\n      isAdmin: false\n    };\n  }\n  const currentTime = Date.now() / 1000;\n  let decoded = jwt_decode(accessToken);\n  if (decoded.exp > currentTime) {\n    let checkAdmin = await fetchisAdmin(); // Await the result\n    return {\n      'name': decoded.first_name,\n      isAuthenticated: true,\n      isAdmin: checkAdmin\n    };\n  } else {\n    const updateSuccess = await updateAdminToken();\n    if (updateSuccess) {\n      let decoded = jwt_decode(accessToken);\n      let checkAdmin = await fetchisAdmin(); // Await the result\n      return {\n        'name': decoded.first_name,\n        isAuthenticated: true,\n        isAdmin: checkAdmin\n      };\n    } else {\n      return {\n        'name': null,\n        isAuthenticated: false,\n        isAdmin: false\n      };\n    }\n  }\n};\nexport default isAuthAdmin;","map":{"version":3,"names":["jwt_decode","axios","baseURL","updateAdminToken","refreshToken","localStorage","getItem","res","post","status","setItem","data","access","refresh","error","fetchisAdmin","token","get","headers","is_superuser","isAuthAdmin","accessToken","isAuthenticated","isAdmin","currentTime","Date","now","decoded","exp","checkAdmin","first_name","updateSuccess"],"sources":["C:/Users/nair6/Documents/Brototype/WEEK 20 - REACT/user_managemnet/frontend/django_react/src/utils/isAuthAdmin.js"],"sourcesContent":["\r\n// import jwt_decode from \"jwt-decode\";\r\n// import axios from 'axios'\r\n\r\n// const baseURL='http://127.0.0.1:8000'\r\n// const updateAdminToken = async ()=>{\r\n//     const refreshToken = localStorage.getItem(\"refresh\");\r\n\r\n//     try {\r\n//         const res = await axios.post(baseURL+'/api/accounts/token/refresh/', \r\n//         {\r\n//             'refresh':refreshToken\r\n//         })\r\n//         if(res.status === 200){\r\n//           localStorage.setItem('access', res.data.access)\r\n//           localStorage.setItem('refresh', res.data.refresh)\r\n//           return true\r\n//         }\r\n//         else\r\n//         {\r\n//             return false\r\n//         }  \r\n        \r\n//       }\r\n//       catch (error) {\r\n//          return false\r\n//       }\r\n// }\r\n\r\n\r\n// const fetchisAdmin = async () => {\r\n//   const token = localStorage.getItem('access');\r\n//   try {\r\n//       const res = await axios.get(baseURL+'/api/accounts/user/details/',{headers: {\r\n//         'authorization': `Bearer ${token}`,\r\n//         'Accept' : 'application/json',\r\n//         'Content-Type': 'application/json'\r\n//     }})\r\n//       .then(res => {\r\n//           console.log(res);\r\n//           return res.data.is_superuser;\r\n//         })\r\n//   }\r\n//   catch (error) {\r\n//     return false\r\n    \r\n//   }\r\n\r\n// };\r\n// const isAuthAdmin = async () => {\r\n\r\n//     const accessToken = localStorage.getItem(\"access\");\r\n   \r\n//     if(!accessToken)\r\n//     {\r\n//         return {'name':null,isAuthenticated:false,isAdmin:false}\r\n//     }\r\n//     const currentTime = Date.now() / 1000;\r\n//     let decoded = jwt_decode(accessToken);\r\n//     if (decoded.exp > currentTime) \r\n//     {\r\n//         let checkAdmin = fetchisAdmin()\r\n//         return {'name':decoded.first_name,isAuthenticated:true,isAdmin:checkAdmin}\r\n//     } \r\n//     else \r\n//     {\r\n//         const updateSuccess = await updateAdminToken();\r\n//         if (updateSuccess)\r\n//         {\r\n//             let decoded = jwt_decode(accessToken);\r\n//             let checkAdmin = fetchisAdmin()\r\n//             return {'name':decoded.first_name,isAuthenticated:true,isAdmin:checkAdmin}\r\n//         }\r\n//         else\r\n//         {\r\n//             return {'name':null,isAuthenticated:false,isAdmin:false}\r\n//         }\r\n      \r\n//     }\r\n\r\n\r\n\r\n// }\r\n// export default isAuthAdmin ;\r\n\r\n\r\nimport jwt_decode from \"jwt-decode\";\r\nimport axios from 'axios';\r\n\r\nconst baseURL = 'http://127.0.0.1:8000';\r\n\r\nconst updateAdminToken = async () => {\r\n    const refreshToken = localStorage.getItem(\"refresh\");\r\n\r\n    try {\r\n        const res = await axios.post(baseURL + '/api/accounts/token/refresh/', {\r\n            'refresh': refreshToken\r\n        });\r\n\r\n        if (res.status === 200) {\r\n            localStorage.setItem('access', res.data.access);\r\n            localStorage.setItem('refresh', res.data.refresh);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n\r\n    } catch (error) {\r\n        return false;\r\n    }\r\n};\r\n\r\nconst fetchisAdmin = async () => {\r\n    const token = localStorage.getItem('access');\r\n    \r\n    try {\r\n        const res = await axios.get(baseURL + '/api/accounts/user/details/', {\r\n            headers: {\r\n                'Authorization': `Bearer ${token}`,\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            }\r\n        });\r\n\r\n        return res.data.is_superuser; // Return directly from the function\r\n\r\n    } catch (error) {\r\n        return false;\r\n    }\r\n};\r\n\r\nconst isAuthAdmin = async () => {\r\n    const accessToken = localStorage.getItem(\"access\");\r\n\r\n    if (!accessToken) {\r\n        return { 'name': null, isAuthenticated: false, isAdmin: false };\r\n    }\r\n\r\n    const currentTime = Date.now() / 1000;\r\n    let decoded = jwt_decode(accessToken);\r\n\r\n    if (decoded.exp > currentTime) {\r\n        let checkAdmin = await fetchisAdmin(); // Await the result\r\n        return { 'name': decoded.first_name, isAuthenticated: true, isAdmin: checkAdmin };\r\n    } else {\r\n        const updateSuccess = await updateAdminToken();\r\n\r\n        if (updateSuccess) {\r\n            let decoded = jwt_decode(accessToken);\r\n            let checkAdmin = await fetchisAdmin(); // Await the result\r\n            return { 'name': decoded.first_name, isAuthenticated: true, isAdmin: checkAdmin };\r\n        } else {\r\n            return { 'name': null, isAuthenticated: false, isAdmin: false };\r\n        }\r\n    }\r\n};\r\n\r\nexport default isAuthAdmin;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}